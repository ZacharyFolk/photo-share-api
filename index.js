const { ApolloServer } = require('apollo-server')

const typeDefs = `
# 1. Add Photo type definition
type Photo {
  id: ID!
  url: String!
  name: String!
  description: String
}
# 2. Return Photo from AllPhotos
type Query {
  totalPhotos: Int!
  allPhotos: [Photo!]!
}

# 3. Return the newly posted photo from the mutation
type Mutation {
  postPhoto(name: String! description: String): Photo!
}
`
// 1 . A variable to increment for unique ids
var _id = 0

var photos = []

const resolvers = {
  Query: {
    totalPhotos: () => photos.length,
    allPhotos: () => photos
  },

Mutation: {
    postPhoto(parent, args) {

      // 2 . Create a new photo, and generate an id
      var newPhoto = {
        id: _id++, // normally this generated by db
        ...args // spread names and desc fileds from args
      }
      photos.push(newPhoto)

      // 3. Return the new photo
      return newPhoto
    }
  },
  Photo: {
    url: parent => `http://folkphotography.com/img/${parent.id}.jpg`
  }
}

const server = new ApolloServer({
  typeDefs,
  resolvers
})

server
.listen()
.then(({url}) => console.log(`GraphQL Service is running on ${url}`))
